// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1.Data;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250630091001_User_Migration")]
    partial class User_Migration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Blog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Blogs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d81835f5-1a70-47f7-8096-dcee045cea95"),
                            Author = "Author- 1",
                            CategoryId = new Guid("80abbca8-664d-4b20-b5de-024705497d4a"),
                            Title = "title - 1"
                        },
                        new
                        {
                            Id = new Guid("2b14aa3e-ff18-4554-ab84-254cc86313a9"),
                            Author = "Author- 2",
                            CategoryId = new Guid("021ca3c1-0deb-4afd-ae94-2159a8479811"),
                            Title = "title - 2"
                        },
                        new
                        {
                            Id = new Guid("d0949bda-be0f-49fe-b123-7c4c6b63e55e"),
                            Author = "Author- 3",
                            CategoryId = new Guid("021ca3c1-0deb-4afd-ae94-2159a8479811"),
                            Title = "title - 3"
                        },
                        new
                        {
                            Id = new Guid("b8fda8c7-612d-4297-b4db-c2d0ce2361d8"),
                            Author = "Author- 4",
                            CategoryId = new Guid("021ca3c1-0deb-4afd-ae94-2159a8479811"),
                            Title = "title - 4"
                        },
                        new
                        {
                            Id = new Guid("0a238c13-f5b6-4ab5-935c-b916df45bf01"),
                            Author = "Author- 5",
                            CategoryId = new Guid("80abbca8-664d-4b20-b5de-024705497d4a"),
                            Title = "title - 5"
                        },
                        new
                        {
                            Id = new Guid("e3350d8c-0642-4774-8f1e-dc704440650e"),
                            Author = "Author- 6",
                            CategoryId = new Guid("021ca3c1-0deb-4afd-ae94-2159a8479811"),
                            Title = "title - 6"
                        },
                        new
                        {
                            Id = new Guid("668e3325-240b-43e4-967b-bd81a6dff93f"),
                            Author = "Author- 7",
                            CategoryId = new Guid("80abbca8-664d-4b20-b5de-024705497d4a"),
                            Title = "title - 7"
                        },
                        new
                        {
                            Id = new Guid("cd98fcb9-ff19-4fe5-bd5e-b34512c95b21"),
                            Author = "Author- 8",
                            CategoryId = new Guid("86dba8c0-d178-41e7-938c-ed49778fb52a"),
                            Title = "title - 8"
                        },
                        new
                        {
                            Id = new Guid("da0635e8-5fc9-4af0-bcc9-3d16e19212d9"),
                            Author = "Author- 9",
                            CategoryId = new Guid("86dba8c0-d178-41e7-938c-ed49778fb52a"),
                            Title = "title - 9"
                        },
                        new
                        {
                            Id = new Guid("241ac167-ef02-4f23-9028-c56ca09da00c"),
                            Author = "Author- 10",
                            CategoryId = new Guid("80abbca8-664d-4b20-b5de-024705497d4a"),
                            Title = "title - 10"
                        },
                        new
                        {
                            Id = new Guid("a43dd108-f94e-4d0e-9098-45faccf6b4a9"),
                            Author = "Author- 11",
                            CategoryId = new Guid("80abbca8-664d-4b20-b5de-024705497d4a"),
                            Title = "title - 11"
                        },
                        new
                        {
                            Id = new Guid("b14ea5f8-e9a4-46c3-a9b5-6da1ec98494f"),
                            Author = "Author- 12",
                            CategoryId = new Guid("021ca3c1-0deb-4afd-ae94-2159a8479811"),
                            Title = "title - 12"
                        },
                        new
                        {
                            Id = new Guid("20047d92-be8a-435b-9542-7c32d4e3dc38"),
                            Author = "Author- 13",
                            CategoryId = new Guid("80abbca8-664d-4b20-b5de-024705497d4a"),
                            Title = "title - 13"
                        },
                        new
                        {
                            Id = new Guid("77e7e808-6eb6-4a8c-86e1-8066deff8769"),
                            Author = "Author- 14",
                            CategoryId = new Guid("80abbca8-664d-4b20-b5de-024705497d4a"),
                            Title = "title - 14"
                        },
                        new
                        {
                            Id = new Guid("b9897ce9-361e-4faf-8830-49afc789091a"),
                            Author = "Author- 15",
                            CategoryId = new Guid("80abbca8-664d-4b20-b5de-024705497d4a"),
                            Title = "title - 15"
                        },
                        new
                        {
                            Id = new Guid("fdb03cdd-2963-478d-bf40-47d16e1dd008"),
                            Author = "Author- 16",
                            CategoryId = new Guid("80abbca8-664d-4b20-b5de-024705497d4a"),
                            Title = "title - 16"
                        },
                        new
                        {
                            Id = new Guid("96f9612a-9a04-4990-a35e-94ccfbbc6ddd"),
                            Author = "Author- 17",
                            CategoryId = new Guid("80abbca8-664d-4b20-b5de-024705497d4a"),
                            Title = "title - 17"
                        },
                        new
                        {
                            Id = new Guid("10b643d9-e974-45c0-b72d-b5ed65bcfcac"),
                            Author = "Author- 18",
                            CategoryId = new Guid("021ca3c1-0deb-4afd-ae94-2159a8479811"),
                            Title = "title - 18"
                        },
                        new
                        {
                            Id = new Guid("d0e9793d-121e-461a-84cc-80f8276a2a54"),
                            Author = "Author- 19",
                            CategoryId = new Guid("021ca3c1-0deb-4afd-ae94-2159a8479811"),
                            Title = "title - 19"
                        },
                        new
                        {
                            Id = new Guid("0ce9bfeb-0769-49fd-8928-fcf9e32f023c"),
                            Author = "Author- 20",
                            CategoryId = new Guid("021ca3c1-0deb-4afd-ae94-2159a8479811"),
                            Title = "title - 20"
                        });
                });

            modelBuilder.Entity("WebApplication1.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("80abbca8-664d-4b20-b5de-024705497d4a"),
                            Name = "Sam Raiden"
                        },
                        new
                        {
                            Id = new Guid("86dba8c0-d178-41e7-938c-ed49778fb52a"),
                            Name = "Jana McLeaf"
                        },
                        new
                        {
                            Id = new Guid("021ca3c1-0deb-4afd-ae94-2159a8479811"),
                            Name = "Kane Miller"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication1.Models.Blog", b =>
                {
                    b.HasOne("WebApplication1.Models.Category", "Category")
                        .WithMany("Blogs")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("WebApplication1.Models.Category", b =>
                {
                    b.Navigation("Blogs");
                });
#pragma warning restore 612, 618
        }
    }
}
